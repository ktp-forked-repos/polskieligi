<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans	
	http://www.springframework.org/schema/beans/spring-beans.xsd 	
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/batch 
    http://www.springframework.org/schema/batch/spring-batch.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd 			
    http://www.springframework.org/schema/jdbc 
	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task.xsd">

	<context:component-scan base-package="pl.polskieligi.batch" />

	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseType" value="POSTGRES" />
	</bean>

	<bean id="pojectUpdateJobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="pojectImportJobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
		<property name="taskExecutor" ref="taskExecutor" />
	</bean>

	<bean id="taskExecutor" class="org.springframework.core.task.SimpleAsyncTaskExecutor" />

	<job id="projectUpdateJob" xmlns="http://www.springframework.org/schema/batch"
		restartable="true">
		<listeners>
			<listener ref="projectUpdateJobExecutionListener" />
		</listeners>
		<step id="projectUpdateStep" allow-start-if-complete="true">
			<tasklet transaction-manager="transactionManager">
				<chunk reader="projectUpdateReader" processor="projectProcessor"
					writer="emptyWriter" commit-interval="1" />
			</tasklet>
		</step>
	</job>

	<job id="projectImportJob" xmlns="http://www.springframework.org/schema/batch"
		restartable="true">
		<step id="projectImportStep" allow-start-if-complete="true">
			<tasklet transaction-manager="transactionManager">
				<chunk reader="projectImportReader" processor="projectProcessor"
					writer="emptyWriter" commit-interval="1" />
			</tasklet>
		</step>
	</job>

	<bean id="projectUpdateJobExecutionListener" class="pl.polskieligi.batch.ProjectUpdateJobExecutionListener" />

	<bean id="projectProcessor" class="pl.polskieligi.batch.ProjectProcessor" />

	<bean id="emptyWriter" class="pl.polskieligi.batch.EmptyWriter" />

	<bean id="projectImportReader" class="pl.polskieligi.batch.ProjectImportReader" />

	<bean id="projectUpdateReader"
		class="org.springframework.batch.item.database.HibernateCursorItemReader">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="queryString">
			<!-- Why CDATA? because < etc. is not allowed for xml values when you 
				use &lt; xml parser will work, but now the sql won't because of the & spring 
				assumes a placeholder, see - AbstractSqlPagingQueryProvider.init(...) - JdbcParameterUtils.countParameterPlaceholders(...) -->
			<value>
                <![CDATA[
                    SELECT minut_id FROM Project where type = 1 and (archive = false or published = false)
                ]]>
			</value>
		</property>
	</bean>

	<!--<bean id="myTasklet" class="pl.polskieligi.batch.LigaTasklet"/> -->

	<bean id="projectUpdateScheduler" class="pl.polskieligi.batch.ProjectUpdateScheduler" />
	<!-- this is where we are scheduling the job to run using our scheduler 
		every 5 secs, note how the method of the scheduler and the cron expression 
		to be used are being specified -->
	<task:scheduled-tasks>
		<task:scheduled ref="projectUpdateScheduler" method="run"
			cron="*/30 * * * * *" />
	</task:scheduled-tasks>

	<bean id="jobExplorer"
		class="org.springframework.batch.core.explore.support.JobExplorerFactoryBean">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>
